swagger: '2.0'
info:
  description: GoChain API
  version: "1.0.0"
  title: GoChain

  contact:
    email: m.lyamets@innopolis.ru

  license:
    name: WTFPL

host: localhost:3000
basePath: /v1
schemes:
  - http

paths:
  /new_transaction:
    post:
      summary: Commit new transaction
      operationId: addTransaction
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: Transaction
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        201:
          description: transaction commited
        400:
          description: invalid transaction

  /chain:
    get:
      summary: Retrieve the entire chain of blocks
      operationId: getChain
      produces:
        - application/json
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/Chain'

  /mine:
    get:
      operationId: Mine
      summary: Mine transactions and announce to peers
      responses:
        200:
          description: success

  /add_block:
    post:
      operationId: addBlock
      summary: Announce a block to this node
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Block
          schema:
            $ref: "#/definitions/Block"
      responses:
        200:
          description: success
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"

  /register_node:
    post:
      operationId: registerNode
      summary: Register with this node
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Peer
          schema:
            $ref: '#/definitions/Peer'
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/Chain'

  /register_with:
    post:
      operationId: registerWithNode
      summary: Register with a specific node
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Peer
          schema:
            $ref: '#/definitions/Peer'
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/Chain'
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"

definitions:
  Transaction:
    type: object
    required:
      - author
      - content
    properties:
      author:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      content:
        type: string
  Block:
    type: object
    required:
      - index
      - transactions
      - proofOfWork
    properties:
      index:
        type: integer
      transactions:
        type: array
        items:
          $ref: '#/definitions/Transaction'
      proofOfWork:
        type: string
        description: sha256 digest
      prevBlockHash:
        type: string
        description: sha256 + nonce digest
  Chain:
    required:
      - length
      - chain
      - peers
    properties:
      length:
        type: integer
      chain:
        type: array
        items:
          $ref: '#/definitions/Block'
      peers:
        type: array
        items:
          $ref: '#/definitions/Peer'
  Peer:
    type: object
    properties:
      node_address:
        type: string
        format: url
  Error:
    type: object
    properties:
      message:
        type: string
        example: failure
