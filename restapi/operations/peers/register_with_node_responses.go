// Code generated by go-swagger; DO NOT EDIT.

package peers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gochain/models"
)

// RegisterWithNodeOKCode is the HTTP code returned for type RegisterWithNodeOK
const RegisterWithNodeOKCode int = 200

/*RegisterWithNodeOK success

swagger:response registerWithNodeOK
*/
type RegisterWithNodeOK struct {

	/*
	  In: Body
	*/
	Payload *models.Transaction `json:"body,omitempty"`
}

// NewRegisterWithNodeOK creates RegisterWithNodeOK with default headers values
func NewRegisterWithNodeOK() *RegisterWithNodeOK {

	return &RegisterWithNodeOK{}
}

// WithPayload adds the payload to the register with node o k response
func (o *RegisterWithNodeOK) WithPayload(payload *models.Transaction) *RegisterWithNodeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register with node o k response
func (o *RegisterWithNodeOK) SetPayload(payload *models.Transaction) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterWithNodeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterWithNodeBadRequestCode is the HTTP code returned for type RegisterWithNodeBadRequest
const RegisterWithNodeBadRequestCode int = 400

/*RegisterWithNodeBadRequest bad request

swagger:response registerWithNodeBadRequest
*/
type RegisterWithNodeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterWithNodeBadRequest creates RegisterWithNodeBadRequest with default headers values
func NewRegisterWithNodeBadRequest() *RegisterWithNodeBadRequest {

	return &RegisterWithNodeBadRequest{}
}

// WithPayload adds the payload to the register with node bad request response
func (o *RegisterWithNodeBadRequest) WithPayload(payload *models.Error) *RegisterWithNodeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register with node bad request response
func (o *RegisterWithNodeBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterWithNodeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
