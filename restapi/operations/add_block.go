// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddBlockHandlerFunc turns a function with the right signature into a add block handler
type AddBlockHandlerFunc func(AddBlockParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddBlockHandlerFunc) Handle(params AddBlockParams) middleware.Responder {
	return fn(params)
}

// AddBlockHandler interface for that can handle valid add block params
type AddBlockHandler interface {
	Handle(AddBlockParams) middleware.Responder
}

// NewAddBlock creates a new http.Handler for the add block operation
func NewAddBlock(ctx *middleware.Context, handler AddBlockHandler) *AddBlock {
	return &AddBlock{Context: ctx, Handler: handler}
}

/*AddBlock swagger:route POST /add_block addBlock

Announce a block to this node

*/
type AddBlock struct {
	Context *middleware.Context
	Handler AddBlockHandler
}

func (o *AddBlock) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddBlockParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
